"""refactor models with improved type safety and validation

Revision ID: c0cf1361e092
Revises: 794f4994f944
Create Date: 2025-01-02 13:05:32.689770

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import app
from app.db.database_types import TZDateTime

# revision identifiers, used by Alembic.
revision: str = "c0cf1361e092"
down_revision: Union[str, None] = "794f4994f944"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Pushes changes into the database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("depth", sa.Integer(), nullable=False),
        sa.Column("path", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", app.db.types.TZDateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["parent_id"], ["categories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_categories_name"), "categories", ["name"], unique=False)
    op.create_index(
        op.f("ix_categories_parent_id"), "categories", ["parent_id"], unique=False
    )
    op.create_index(op.f("ix_categories_slug"), "categories", ["slug"], unique=True)
    op.create_table(
        "services",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column(
            "base_price",
            sa.Numeric(precision=10, scale=2),
            nullable=True,
            comment="Base price for the service",
        ),
        sa.Column(
            "price_unit",
            sa.String(length=50),
            nullable=True,
            comment="Unit of measurement for the price",
        ),
        sa.Column(
            "minimum_hours",
            sa.Integer(),
            nullable=True,
            comment="Minimum duration in hours",
        ),
        sa.Column(
            "maximum_hours",
            sa.Integer(),
            nullable=True,
            comment="Maximum duration in hours",
        ),
        sa.Column("requires_consultation", sa.Boolean(), nullable=False),
        sa.Column("is_remote_available", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            app.db.types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", app.db.types.TZDateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_services_category_id"), "services", ["category_id"], unique=False
    )
    op.create_index(op.f("ix_services_name"), "services", ["name"], unique=False)
    op.create_table(
        "contact_categories",
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("contact_id", "category_id"),
    )
    op.create_index(
        op.f("ix_contact_categories_category_id"),
        "contact_categories",
        ["category_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_categories_contact_id"),
        "contact_categories",
        ["contact_id"],
        unique=False,
    )
    op.create_table(
        "contact_services",
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["services.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("contact_id", "service_id"),
    )
    op.create_index(
        op.f("ix_contact_services_contact_id"),
        "contact_services",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_services_service_id"),
        "contact_services",
        ["service_id"],
        unique=False,
    )
    op.add_column(
        "communities",
        sa.Column("total_count", sa.Integer(), nullable=False, server_default="0"),
    )
    op.add_column(
        "communities",
        sa.Column("active_count", sa.Integer(), nullable=False, server_default="0"),
    )
    op.execute(
        "CREATE TYPE privacy_level_enum AS ENUM ('PUBLIC', 'PRIVATE', 'INVITATION_ONLY')"
    )
    op.execute(
        """
        ALTER TABLE communities 
        ALTER COLUMN privacy_level TYPE privacy_level_enum 
        USING (
            CASE 
                WHEN privacy_level = 'public' THEN 'PUBLIC'::privacy_level_enum
                WHEN privacy_level = 'private' THEN 'PRIVATE'::privacy_level_enum
                WHEN privacy_level = 'invitation_only' THEN 'INVITATION_ONLY'::privacy_level_enum
                ELSE 'PUBLIC'::privacy_level_enum
            END
        )
    """
    )
    op.alter_column(
        "communities",
        "privacy_level",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum(
            "PUBLIC", "PRIVATE", "INVITATION_ONLY", name="privacy_level_enum"
        ),
        nullable=False,
    )
    op.alter_column(
        "communities",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "communities", "is_active", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.drop_index("ix_communities_id", table_name="communities")
    op.drop_index("ix_communities_name", table_name="communities")
    op.create_index(op.f("ix_communities_name"), "communities", ["name"], unique=False)
    op.create_index(
        op.f("ix_communities_owner_id"), "communities", ["owner_id"], unique=False
    )
    op.create_index(
        op.f("ix_community_contacts_community_id"),
        "community_contacts",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_community_contacts_contact_id"),
        "community_contacts",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_community_relationships_community_a_id"),
        "community_relationships",
        ["community_a_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_community_relationships_community_b_id"),
        "community_relationships",
        ["community_b_id"],
        unique=False,
    )
    op.add_column(
        "contact_endorsements",
        sa.Column("is_public", sa.Boolean(), nullable=False, server_default="false"),
    )
    op.alter_column(
        "contact_endorsements",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "contact_endorsements",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    op.drop_index("ix_contact_endorsements_id", table_name="contact_endorsements")
    op.create_index(
        op.f("ix_contact_endorsements_community_id"),
        "contact_endorsements",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_endorsements_contact_id"),
        "contact_endorsements",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_endorsements_user_id"),
        "contact_endorsements",
        ["user_id"],
        unique=False,
    )
    op.create_unique_constraint(
        "uq_user_contact_community_endorsement",
        "contact_endorsements",
        ["user_id", "contact_id", "community_id"],
    )
    op.add_column(
        "contacts",
        sa.Column(
            "average_rating",
            sa.Integer(),
            nullable=True,
            comment="Average rating out of 5",
        ),
    )
    op.add_column(
        "contacts",
        sa.Column(
            "verified_endorsements_count",
            sa.Integer(),
            nullable=False,
            server_default="0",
        ),
    )
    op.add_column(
        "contacts",
        sa.Column(
            "created_at",
            app.db.types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "contacts",
        sa.Column("updated_at", app.db.types.TZDateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "contacts",
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default="false"),
    )
    op.alter_column(
        "contacts", "endorsements_count", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_index("ix_contacts_id", table_name="contacts")
    op.create_index(op.f("ix_contacts_user_id"), "contacts", ["user_id"], unique=False)
    op.drop_constraint("contacts_community_id_fkey", "contacts", type_="foreignkey")
    op.drop_column("contacts", "community_id")
    op.drop_column("contacts", "categories")
    op.drop_column("contacts", "services")
    op.add_column(
        "roles",
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default="true"),
    )
    op.alter_column(
        "roles", "is_system_role", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "roles",
        "description",
        existing_type=sa.VARCHAR(length=200),
        type_=sa.String(length=500),
        existing_nullable=True,
    )
    op.alter_column(
        "roles",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("ix_roles_id", table_name="roles")
    op.drop_constraint("roles_name_key", "roles", type_="unique")
    op.create_index(op.f("ix_roles_name"), "roles", ["name"], unique=True)
    op.create_index(
        op.f("ix_user_communities_community_id"),
        "user_communities",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_communities_user_id"),
        "user_communities",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_roles_role_id"), "user_roles", ["role_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_roles_user_id"), "user_roles", ["user_id"], unique=False
    )
    op.alter_column(
        "users", "email_verified", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "users",
        "last_login",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column("users", "is_active", existing_type=sa.BOOLEAN(), nullable=False)
    op.drop_index("ix_users_id", table_name="users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Reverts changes performed by upgrade()."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.alter_column("users", "is_active", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "last_login",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users", "email_verified", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.drop_index(op.f("ix_user_roles_user_id"), table_name="user_roles")
    op.drop_index(op.f("ix_user_roles_role_id"), table_name="user_roles")
    op.drop_index(op.f("ix_user_communities_user_id"), table_name="user_communities")
    op.drop_index(
        op.f("ix_user_communities_community_id"), table_name="user_communities"
    )
    op.drop_index(op.f("ix_roles_name"), table_name="roles")
    op.create_unique_constraint("roles_name_key", "roles", ["name"])
    op.create_index("ix_roles_id", "roles", ["id"], unique=False)
    op.alter_column(
        "roles",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "roles",
        "description",
        existing_type=sa.String(length=500),
        type_=sa.VARCHAR(length=200),
        existing_nullable=True,
    )
    op.alter_column(
        "roles", "is_system_role", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.drop_column("roles", "is_active")
    op.add_column(
        "contacts",
        sa.Column(
            "services", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "contacts",
        sa.Column(
            "categories", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "contacts",
        sa.Column("community_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "contacts_community_id_fkey",
        "contacts",
        "communities",
        ["community_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_contacts_user_id"), table_name="contacts")
    op.create_index("ix_contacts_id", "contacts", ["id"], unique=False)
    op.alter_column(
        "contacts", "endorsements_count", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_column("contacts", "is_active")
    op.drop_column("contacts", "updated_at")
    op.drop_column("contacts", "created_at")
    op.drop_column("contacts", "verified_endorsements_count")
    op.drop_column("contacts", "average_rating")
    op.drop_constraint(
        "uq_user_contact_community_endorsement", "contact_endorsements", type_="unique"
    )
    op.drop_index(
        op.f("ix_contact_endorsements_user_id"), table_name="contact_endorsements"
    )
    op.drop_index(
        op.f("ix_contact_endorsements_contact_id"), table_name="contact_endorsements"
    )
    op.drop_index(
        op.f("ix_contact_endorsements_community_id"), table_name="contact_endorsements"
    )
    op.create_index(
        "ix_contact_endorsements_id", "contact_endorsements", ["id"], unique=False
    )
    op.alter_column(
        "contact_endorsements", "is_verified", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.alter_column(
        "contact_endorsements",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.drop_column("contact_endorsements", "is_public")
    op.drop_column("contact_endorsements", "verification_notes")
    op.drop_index(
        op.f("ix_community_relationships_community_b_id"),
        table_name="community_relationships",
    )
    op.drop_index(
        op.f("ix_community_relationships_community_a_id"),
        table_name="community_relationships",
    )
    op.drop_index(
        op.f("ix_community_contacts_contact_id"), table_name="community_contacts"
    )
    op.drop_index(
        op.f("ix_community_contacts_community_id"), table_name="community_contacts"
    )
    op.drop_index(op.f("ix_communities_owner_id"), table_name="communities")
    op.drop_index(op.f("ix_communities_name"), table_name="communities")
    op.create_index("ix_communities_name", "communities", ["name"], unique=True)
    op.create_index("ix_communities_id", "communities", ["id"], unique=False)
    op.alter_column(
        "communities", "is_active", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.alter_column(
        "communities",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "communities",
        "privacy_level",
        existing_type=sa.Enum(
            "PUBLIC", "PRIVATE", "INVITATION_ONLY", name="privacy_level_enum"
        ),
        type_=sa.VARCHAR(length=20),
        nullable=True,
    )
    op.drop_column("communities", "active_count")
    op.drop_column("communities", "total_count")
    op.drop_index(op.f("ix_contact_services_service_id"), table_name="contact_services")
    op.drop_index(op.f("ix_contact_services_contact_id"), table_name="contact_services")
    op.drop_table("contact_services")
    op.drop_index(
        op.f("ix_contact_categories_contact_id"), table_name="contact_categories"
    )
    op.drop_index(
        op.f("ix_contact_categories_category_id"), table_name="contact_categories"
    )
    op.drop_table("contact_categories")
    op.drop_index(op.f("ix_services_name"), table_name="services")
    op.drop_index(op.f("ix_services_category_id"), table_name="services")
    op.drop_table("services")
    op.drop_index(op.f("ix_categories_slug"), table_name="categories")
    op.drop_index(op.f("ix_categories_parent_id"), table_name="categories")
    op.drop_index(op.f("ix_categories_name"), table_name="categories")
    op.drop_table("categories")
    # ### end Alembic commands ###
