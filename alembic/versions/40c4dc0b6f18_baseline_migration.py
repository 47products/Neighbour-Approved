"""baseline migration

Revision ID: 40c4dc0b6f18
Revises: 
Create Date: 2025-02-26 14:10:59.905104

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import app


# revision identifiers, used by Alembic.
revision: str = "40c4dc0b6f18"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("depth", sa.Integer(), nullable=False),
        sa.Column("path", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["parent_id"], ["categories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_categories_depth",
        "categories",
        ["depth", "is_active"],
        unique=False,
        postgresql_using="btree",
    )
    op.create_index(
        "idx_categories_hierarchy",
        "categories",
        ["path", "is_active"],
        unique=False,
        postgresql_using="btree",
    )
    op.create_index(
        "idx_categories_ordering",
        "categories",
        ["parent_id", "sort_order", "is_active"],
        unique=False,
        postgresql_using="btree",
    )
    op.create_index(
        "idx_categories_path_search",
        "categories",
        ["path"],
        unique=False,
        postgresql_using="btree",
        postgresql_where=sa.text("is_active = true"),
    )
    op.create_index(op.f("ix_categories_name"), "categories", ["name"], unique=False)
    op.create_index(
        op.f("ix_categories_parent_id"), "categories", ["parent_id"], unique=False
    )
    op.create_index(op.f("ix_categories_slug"), "categories", ["slug"], unique=True)
    op.create_index(
        "uq_category_parent_slug",
        "categories",
        ["parent_id", "slug"],
        unique=True,
        postgresql_where=sa.text("is_active = true"),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("permissions", sa.String(length=500), nullable=True),
        sa.Column("is_system_role", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.CheckConstraint(
            "permissions IS NULL OR json_typeof(permissions::json) = 'array'",
            name="valid_permissions_json",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_roles_name"), "roles", ["name"], unique=True)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=False),
        sa.Column("last_name", sa.String(length=50), nullable=False),
        sa.Column("mobile_number", sa.String(length=20), nullable=True),
        sa.Column("postal_address", sa.String(length=200), nullable=True),
        sa.Column("physical_address", sa.String(length=200), nullable=True),
        sa.Column("country", sa.String(length=50), nullable=True),
        sa.Column("email_verified", sa.Boolean(), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.CheckConstraint(
            "email ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+[.][A-Za-z]{2,}$'",
            name="valid_email_format",
        ),
        sa.CheckConstraint(
            "length(regexp_replace(mobile_number, '[^0-9]', '', 'g')) BETWEEN 10 AND 15",
            name="valid_mobile_number_format",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "communities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "privacy_level",
            sa.Enum("PUBLIC", "PRIVATE", "INVITATION_ONLY", name="privacy_level_enum"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("total_count", sa.Integer(), nullable=False),
        sa.Column("active_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_communities_name"), "communities", ["name"], unique=False)
    op.create_index(
        op.f("ix_communities_owner_id"), "communities", ["owner_id"], unique=False
    )
    op.create_table(
        "contacts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("contact_name", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("contact_number", sa.String(length=20), nullable=True),
        sa.Column("primary_contact_first_name", sa.String(length=50), nullable=False),
        sa.Column("primary_contact_last_name", sa.String(length=50), nullable=False),
        sa.Column(
            "primary_contact_contact_number", sa.String(length=20), nullable=True
        ),
        sa.Column("endorsements_count", sa.Integer(), nullable=False),
        sa.Column(
            "average_rating",
            sa.Float(),
            nullable=True,
            comment="Average rating out of 5",
        ),
        sa.Column("verified_endorsements_count", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.CheckConstraint(
            "email IS NULL OR email ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+[.][A-Za-z]{2,}$'",
            name="valid_email_format",
        ),
        sa.CheckConstraint(
            "length(regexp_replace(contact_number, '[^0-9]', '', 'g')) BETWEEN 10 AND 15",
            name="valid_contact_number_format",
        ),
        sa.CheckConstraint(
            "length(regexp_replace(primary_contact_contact_number, '[^0-9]', '', 'g')) BETWEEN 10 AND 15",
            name="valid_primary_contact_contact_number_format",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_contacts_contact_name_trgm",
        "contacts",
        [sa.text("contact_name gin_trgm_ops")],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_contacts_endorsement_metrics",
        "contacts",
        [
            "endorsements_count",
            "average_rating",
            "verified_endorsements_count",
            "is_active",
        ],
        unique=False,
    )
    op.create_index(
        "idx_contacts_primary_contact_name",
        "contacts",
        ["primary_contact_last_name", "primary_contact_first_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contacts_contact_name"), "contacts", ["contact_name"], unique=False
    )
    op.create_index(op.f("ix_contacts_email"), "contacts", ["email"], unique=True)
    op.create_index(op.f("ix_contacts_user_id"), "contacts", ["user_id"], unique=False)
    op.create_table(
        "services",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column(
            "base_price",
            sa.Numeric(precision=10, scale=2),
            nullable=True,
            comment="Base price for the service",
        ),
        sa.Column(
            "price_unit",
            sa.String(length=50),
            nullable=True,
            comment="Unit of measurement for the price",
        ),
        sa.Column(
            "minimum_hours",
            sa.Integer(),
            nullable=True,
            comment="Minimum duration in hours",
        ),
        sa.Column(
            "maximum_hours",
            sa.Integer(),
            nullable=True,
            comment="Maximum duration in hours",
        ),
        sa.Column("requires_consultation", sa.Boolean(), nullable=False),
        sa.Column("is_remote_available", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_services_availability",
        "services",
        ["is_remote_available", "requires_consultation", "is_active"],
        unique=False,
        postgresql_where=sa.text("is_active = true"),
    )
    op.create_index(
        "idx_services_price",
        "services",
        ["category_id", "base_price", "is_active"],
        unique=False,
        postgresql_where=sa.text("is_active = true"),
    )
    op.create_index(
        op.f("ix_services_category_id"), "services", ["category_id"], unique=False
    )
    op.create_index(op.f("ix_services_name"), "services", ["name"], unique=False)
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.create_index(
        op.f("ix_user_roles_role_id"), "user_roles", ["role_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_roles_user_id"), "user_roles", ["user_id"], unique=False
    )
    op.create_table(
        "community_contacts",
        sa.Column("community_id", sa.Integer(), nullable=False),
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["community_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("community_id", "contact_id"),
    )
    op.create_index(
        op.f("ix_community_contacts_community_id"),
        "community_contacts",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_community_contacts_contact_id"),
        "community_contacts",
        ["contact_id"],
        unique=False,
    )
    op.create_table(
        "community_members",
        sa.Column("community_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(length=50), nullable=False),
        sa.Column(
            "joined_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "role_assigned_at",
            app.db.database_types.TZDateTime(timezone=True),
            nullable=True,
        ),
        sa.Column("role_assigned_by", sa.Integer(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["community_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["role_assigned_by"], ["users.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("community_id", "user_id"),
    )
    op.create_table(
        "community_relationships",
        sa.Column("community_a_id", sa.Integer(), nullable=False),
        sa.Column("community_b_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["community_a_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["community_b_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("community_a_id", "community_b_id"),
    )
    op.create_index(
        op.f("ix_community_relationships_community_a_id"),
        "community_relationships",
        ["community_a_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_community_relationships_community_b_id"),
        "community_relationships",
        ["community_b_id"],
        unique=False,
    )
    op.create_table(
        "contact_categories",
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("contact_id", "category_id"),
    )
    op.create_index(
        op.f("ix_contact_categories_category_id"),
        "contact_categories",
        ["category_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_categories_contact_id"),
        "contact_categories",
        ["contact_id"],
        unique=False,
    )
    op.create_table(
        "contact_endorsements",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("community_id", sa.Integer(), nullable=False),
        sa.Column("endorsed", sa.Boolean(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=True),
        sa.Column("comment", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            app.db.database_types.TZDateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at", app.db.database_types.TZDateTime(timezone=True), nullable=True
        ),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column(
            "verification_date",
            app.db.database_types.TZDateTime(timezone=True),
            nullable=True,
        ),
        sa.Column("verification_notes", sa.String(length=200), nullable=True),
        sa.Column("is_public", sa.Boolean(), nullable=False),
        sa.CheckConstraint(
            "rating IS NULL OR (rating >= 1 AND rating <= 5)", name="valid_rating_range"
        ),
        sa.ForeignKeyConstraint(
            ["community_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id",
            "contact_id",
            "community_id",
            name="uq_user_contact_community_endorsement",
        ),
    )
    op.create_index(
        "idx_contact_endorsements_community",
        "contact_endorsements",
        ["community_id", "created_at"],
        unique=False,
        postgresql_include=["rating", "is_verified"],
    )
    op.create_index(
        "idx_contact_endorsements_verified",
        "contact_endorsements",
        ["contact_id", "is_verified", "rating"],
        unique=False,
        postgresql_where=sa.text("is_verified = true"),
    )
    op.create_index(
        op.f("ix_contact_endorsements_community_id"),
        "contact_endorsements",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_endorsements_contact_id"),
        "contact_endorsements",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_endorsements_user_id"),
        "contact_endorsements",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "contact_services",
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["services.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("contact_id", "service_id"),
    )
    op.create_index(
        op.f("ix_contact_services_contact_id"),
        "contact_services",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_contact_services_service_id"),
        "contact_services",
        ["service_id"],
        unique=False,
    )
    op.create_table(
        "user_communities",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("community_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["community_id"], ["communities.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "community_id"),
    )
    op.create_index(
        op.f("ix_user_communities_community_id"),
        "user_communities",
        ["community_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_communities_user_id"),
        "user_communities",
        ["user_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_communities_user_id"), table_name="user_communities")
    op.drop_index(
        op.f("ix_user_communities_community_id"), table_name="user_communities"
    )
    op.drop_table("user_communities")
    op.drop_index(op.f("ix_contact_services_service_id"), table_name="contact_services")
    op.drop_index(op.f("ix_contact_services_contact_id"), table_name="contact_services")
    op.drop_table("contact_services")
    op.drop_index(
        op.f("ix_contact_endorsements_user_id"), table_name="contact_endorsements"
    )
    op.drop_index(
        op.f("ix_contact_endorsements_contact_id"), table_name="contact_endorsements"
    )
    op.drop_index(
        op.f("ix_contact_endorsements_community_id"), table_name="contact_endorsements"
    )
    op.drop_index(
        "idx_contact_endorsements_verified",
        table_name="contact_endorsements",
        postgresql_where=sa.text("is_verified = true"),
    )
    op.drop_index(
        "idx_contact_endorsements_community",
        table_name="contact_endorsements",
        postgresql_include=["rating", "is_verified"],
    )
    op.drop_table("contact_endorsements")
    op.drop_index(
        op.f("ix_contact_categories_contact_id"), table_name="contact_categories"
    )
    op.drop_index(
        op.f("ix_contact_categories_category_id"), table_name="contact_categories"
    )
    op.drop_table("contact_categories")
    op.drop_index(
        op.f("ix_community_relationships_community_b_id"),
        table_name="community_relationships",
    )
    op.drop_index(
        op.f("ix_community_relationships_community_a_id"),
        table_name="community_relationships",
    )
    op.drop_table("community_relationships")
    op.drop_table("community_members")
    op.drop_index(
        op.f("ix_community_contacts_contact_id"), table_name="community_contacts"
    )
    op.drop_index(
        op.f("ix_community_contacts_community_id"), table_name="community_contacts"
    )
    op.drop_table("community_contacts")
    op.drop_index(op.f("ix_user_roles_user_id"), table_name="user_roles")
    op.drop_index(op.f("ix_user_roles_role_id"), table_name="user_roles")
    op.drop_table("user_roles")
    op.drop_index(op.f("ix_services_name"), table_name="services")
    op.drop_index(op.f("ix_services_category_id"), table_name="services")
    op.drop_index(
        "idx_services_price",
        table_name="services",
        postgresql_where=sa.text("is_active = true"),
    )
    op.drop_index(
        "idx_services_availability",
        table_name="services",
        postgresql_where=sa.text("is_active = true"),
    )
    op.drop_table("services")
    op.drop_index(op.f("ix_contacts_user_id"), table_name="contacts")
    op.drop_index(op.f("ix_contacts_email"), table_name="contacts")
    op.drop_index(op.f("ix_contacts_contact_name"), table_name="contacts")
    op.drop_index("idx_contacts_primary_contact_name", table_name="contacts")
    op.drop_index("idx_contacts_endorsement_metrics", table_name="contacts")
    op.drop_index(
        "idx_contacts_contact_name_trgm", table_name="contacts", postgresql_using="gin"
    )
    op.drop_table("contacts")
    op.drop_index(op.f("ix_communities_owner_id"), table_name="communities")
    op.drop_index(op.f("ix_communities_name"), table_name="communities")
    op.drop_table("communities")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_roles_name"), table_name="roles")
    op.drop_table("roles")
    op.drop_index(
        "uq_category_parent_slug",
        table_name="categories",
        postgresql_where=sa.text("is_active = true"),
    )
    op.drop_index(op.f("ix_categories_slug"), table_name="categories")
    op.drop_index(op.f("ix_categories_parent_id"), table_name="categories")
    op.drop_index(op.f("ix_categories_name"), table_name="categories")
    op.drop_index(
        "idx_categories_path_search",
        table_name="categories",
        postgresql_using="btree",
        postgresql_where=sa.text("is_active = true"),
    )
    op.drop_index(
        "idx_categories_ordering", table_name="categories", postgresql_using="btree"
    )
    op.drop_index(
        "idx_categories_hierarchy", table_name="categories", postgresql_using="btree"
    )
    op.drop_index(
        "idx_categories_depth", table_name="categories", postgresql_using="btree"
    )
    op.drop_table("categories")
    # ### end Alembic commands ###
